# Platilla básica de docker-compose para una instalación de Wordpress.
# >Se deben definir las variables de entorno con el archivo .env correspondiente.
# La versión puede ser necesaria para compatibilidad >Se deben hacer pruebas con esto.
version: '3.4'

# Cada servicio requiere un contenedor
services:
 # Servicio Phpmyadmin
  phpmyadmin:
    # Imagen Docker
    image: phpmyadmin
    # Entorno empleado. Ver anexo al final del documento.
    environment:
        - PMA_ARBITRARY=1
    # Redirección de puertos. 
    ports:
        - 8080:80
    # Redes empleadas por este servicio (Definidas al final de la página.)
    networks:
        - frontend-network
        - backend-network
    # Establecemos dependencias con otros servicios.
    depends_on:
        - mysql
    # Si hay fallo en el servicio, se reinicia.
    restart: always

    # Servicio MySQL. El commando evita que use la contraseña de root en vez de la de mysql.
  mysql:
    image: mysql
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - "3306:3306"
    environment:
        - MYSQL_ROOT_PASSWORD=root
        - MYSQL_DATABASE=wp_database
        - MYSQL_USER=wp_user
        - MYSQL_PASSWORD=wp_password
    volumes:
        - mysql_data:/var/lib/mysql
    networks:
        - backend-network
    restart: always

    # Servicio Wordpress
  wordpress:
    image: wordpress
    ports:
        - "80:80"
    environment:
        - WORDPRESS_DB_NAME=wp_database
        - WORDPRESS_DB_USER=wp_user
        - WORDPRESS_DB_PASSWORD=wp_password
    volumes:
        - wordpress_data:/var/www/html
    networks:
        - frontend-network
        - backend-network
    restart: always

    # Servicio Wordpress CLI
  wpcli:
    image: wordpress:cli
    volumes_from:
      - wordpress
    links:
      - mysql
    entrypoint: wordpress
    command: "--info"
      #Lanzamos los comandos con 'docker-compose run --rm wpcli [COMANDO]'
      #recomendable convertirlo en alias

# Definimos las dos redes necesarias. Ojo con la indentación.
networks:
    frontend-network:
    backend-network:

# Definimos los volúmenes disponibles: Uno para la base de datos y otro para los datos de Wordpress.
volumes:    
    mysql_data:
    wordpress_data:



## Anexo: sobre 'PMA' (PhpMyAdmin)##

# Podemos fijar dos variables de entorno. PMA_HOST y PMA_ARBITRARY=1
# PMA_HOST nos permite indicar el nombre del contenedor con el que quiero conectarme desde phpMyAdmin.
# PMA_ARBITRARY=1 nos ofrecerá un cuadro de texto en el login de phpMyAdmin, indicando el nombre del contenedor al que quieres conectarte.